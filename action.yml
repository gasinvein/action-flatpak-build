name: flatpak-build
description: Build flatpak
inputs:
  kind:
    description: Flatpak ref kind (app or runtime)
    default: app
    required: true
  id:
    description: Flatpak ID
    required: true
  arch:
    description: Flatpak arch to build
    default: x86_64
    required: true
  branch:
    description: Flatpak branch to build
    default: stable
    required: true
  runtime-repos:
    description: .flatpakrepo URLs for dependency repos
    default: https://flathub.org/repo/flathub.flatpakrepo
    required: true
outputs:
  build-dir:
    value: ${{ steps.build.outputs.build-dir }}
    description: Build directory
  build-repo:
    value: ${{ steps.build.outputs.build-repo }}
    description: OSTree repo with exported build
runs:
  using: composite
  steps:
    - id: find-manifest
      shell: bash
      env:
        FLATPAK_ID: ${{ inputs.id }}
      run: |
        set -e
        if [ -f "$FLATPAK_ID.json" ]; then
            MANIFEST="$FLATPAK_ID.json"
        elif [ -f "$FLATPAK_ID.yml" ]; then
            MANIFEST="$FLATPAK_ID.yml"
        elif [ -f "$FLATPAK_ID.yaml" ]; then
            MANIFEST="$FLATPAK_ID.yaml"
        else
            exit 1
        fi
        echo "::set-output name=manifest::$MANIFEST"

    - id: add-repos
      shell: bash
      run: |
        set -e
        set -x
        mapfile -t REPO_URLS < <(grep . <<<"${{ inputs.runtime-repos }}")
        for repo_url in "${REPO_URLS[@]}"; do
          repo_file="${repo_url##*/}"
          repo_name="${repo_file%.flatpakrepo}"
          flatpak remote-add --user --if-not-exists --from "$repo_name" "$repo_url"
        done

    - id: install-sdk
      shell: bash
      run: |
        set -e
        set -x
        mapfile -t REPO_NAMES < <(flatpak remote-list --user --columns=name)
        flatpak-builder $(printf -- '--install-deps-from=%s ' ${REPO_NAMES[@]}) \
                        --install-deps-only --user /dev/null \
                        ${{ steps.find-manifest.outputs.manifest }}

    - id: download-sources
      shell: bash
      run: |
        flatpak-builder --download-only /dev/null \
                        ${{ steps.find-manifest.outputs.manifest }}

    - id: build
      shell: bash
      env:
        FP_BUILD_DIR: build-dir
        FP_BUILD_REPO: build-repo
      run: |
        set -e
        flatpak-builder --disable-updates --disable-download --ccache --sandbox \
                        --default-branch=${{ inputs.branch }} \
                        --arch=${{ inputs.arch }} \
                        --repo=${FP_BUILD_REPO} ${FP_BUILD_DIR} \
                        ${{ steps.find-manifest.outputs.manifest }}
        echo "::set-output name=build-dir::${FP_BUILD_DIR}"
        echo "::set-output name=build-repo::${FP_BUILD_REPO}"
